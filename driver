#!/usr/bin/env bash

set -euo pipefail

DIR="$(dirname "$0")"

FILES=()
OPTIONS=()
INFO=0

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help|-v|--version)
      OPTIONS+=("$1")
      INFO=1
      shift
      ;;
    -*)
      OPTIONS+=("$1")
      shift
      ;;
    *)
      FILES+=("$1")
      shift
      ;;
  esac
done

cd $DIR
EXE=$(cargo build --bin pwcc_bin --release --message-format=json-render-diagnostics | jq -js '.[] | select(.reason == "compiler-artifact") | select(.executable != null) | .executable')


if [[ "${INFO}" -eq "1" ]]; then
  "${EXE}" "${OPTIONS[@]}"
  exit 0
fi

if [[ "${#FILES[@]}" -eq "0" ]]; then
  echo "Must provide filename"
  exit 1
fi

process_file () {
  file="$1"
  output="${file%.*}"
  preprocessed="${output}.i"
  assembly="${output}.s"

  rm -f "${preprocessed}" "${assembly}"

  gcc -E -P "${file}" -o "${preprocessed}"

  if [[ ! -f "${preprocessed}" ]]; then
    echo "gcc produced no preprocessed output"
    exit 1
  fi

  "${EXE}" "${OPTIONS[@]}" "${preprocessed}"

  if [[ "${#OPTIONS[@]}" -gt 0 ]]; then
    exit 0
  fi

  if [[ ! -f "${assembly}" ]]; then
    echo "pwcc produced no assembly output"
    exit 1
  fi

  gcc "${assembly}" -o "${output}"
}

for file in "${FILES[@]}"; do
  process_file "${file}"
done
